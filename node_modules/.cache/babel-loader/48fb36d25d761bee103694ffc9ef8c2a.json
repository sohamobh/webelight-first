{"ast":null,"code":"import _slicedToArray from\"/home/webelight-047/Desktop/Soha/React-Training/React/textutil/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import{BrowserRouter as Router,Routes,Route,Link}from\"react-router-dom\";import logo from\"./logo.svg\";import\"./App.css\";import Navbar from\"./components/Navbar\";import TextForm from\"./components/TextForm\";import About from\"./components/About\";import{useState}from\"react\";import Alert from\"./components/Alert\";//new project.. text management\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";function App(){var _useState=useState(\"light\"),_useState2=_slicedToArray(_useState,2),mode=_useState2[0],setMode=_useState2[1];//whether darkmode is enabled or not\nvar _useState3=useState(null),_useState4=_slicedToArray(_useState3,2),alert=_useState4[0],setAlert=_useState4[1];var showAlert=function showAlert(message,type){//type is the type of Alert amongst warning, success, danger and Alert\nsetAlert({msg:message,type:type});setTimeout(function(){setAlert(null);},1500);};// const togglemodeB = () => {\n//     if (mode === \"light\") {\n//         setMode(\"blue\")\n//         document.body.style.color = \"white\"\n//         document.body.style.backgroundColor = \"#4169e1\"\n//         showAlert(\" Blue mode has been enabled\", \"success\")\n//     } else {\n//         setMode(\"light\")\n//         document.body.style.color = \"black\"\n//         document.body.style.backgroundColor = \"white\"\n//         showAlert(\" Light mode has been enabled\", \"success\") //you cannot capitalize here to get desired output\n//     }\n// }\nvar togglemode=function togglemode(){if(mode===\"light\"){setMode(\"dark\");document.body.style.color=\"white\";document.body.style.backgroundColor=\"#212529\";showAlert(\" Dark mode has been enabled\",\"success\");document.title=\"TextUtils | Dark mode\";setInterval(function(){document.title=\"TextUtils is amazing!!\";},2000);setInterval(function(){document.title=\"Install TextUtils now!!\";},1500);}else{setMode(\"light\");document.body.style.color=\"black\";document.body.style.backgroundColor=\"white\";showAlert(\" Light mode has been enabled\",\"success\");document.title=\"TextUtils | Light mode\";setInterval(function(){document.title=\"TextUtils is amazing!!\";},2000);setInterval(function(){document.title=\"Install TextUtils now!!\";},1500);}};return/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsxs(Router,{children:[/*#__PURE__*/_jsx(Navbar,{title:\"TextUtils\",mode:mode,togglemode:togglemode}),/*#__PURE__*/_jsx(Alert,{alert:alert}),/*#__PURE__*/_jsx(\"div\",{className:\"container my-3\",children:/*#__PURE__*/_jsxs(Routes,{children:[/*#__PURE__*/_jsx(Route,{exact:true,path:\"/about\",element:/*#__PURE__*/_jsx(About,{})}),/*#__PURE__*/_jsx(Route,{exact:true//finds the exact matching path\n,path:\"/\",element:/*#__PURE__*/_jsx(TextForm,{showAlert:showAlert,heading:\"Enter the text to manipulate\",mode:mode})})]})})]})});}export default App;","map":{"version":3,"sources":["/home/webelight-047/Desktop/Soha/React-Training/React/textutil/src/App.js"],"names":["BrowserRouter","Router","Routes","Route","Link","logo","Navbar","TextForm","About","useState","Alert","App","mode","setMode","alert","setAlert","showAlert","message","type","msg","setTimeout","togglemode","document","body","style","color","backgroundColor","title","setInterval"],"mappings":"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","sourcesContent":["import { BrowserRouter as Router, Routes, Route, Link } from \"react-router-dom\"\nimport logo from \"./logo.svg\"\nimport \"./App.css\"\nimport Navbar from \"./components/Navbar\"\nimport TextForm from \"./components/TextForm\"\nimport About from \"./components/About\"\nimport { useState } from \"react\"\nimport Alert from \"./components/Alert\"\n\n//new project.. text management\nfunction App() {\n    const [mode, setMode] = useState(\"light\") //whether darkmode is enabled or not\n    const [alert, setAlert] = useState(null)\n\n    const showAlert = (message, type) => {\n        //type is the type of Alert amongst warning, success, danger and Alert\n        setAlert({ msg: message, type: type })\n        setTimeout(() => {\n            setAlert(null)\n        }, 1500)\n    }\n    // const togglemodeB = () => {\n    //     if (mode === \"light\") {\n    //         setMode(\"blue\")\n    //         document.body.style.color = \"white\"\n    //         document.body.style.backgroundColor = \"#4169e1\"\n    //         showAlert(\" Blue mode has been enabled\", \"success\")\n    //     } else {\n    //         setMode(\"light\")\n    //         document.body.style.color = \"black\"\n    //         document.body.style.backgroundColor = \"white\"\n    //         showAlert(\" Light mode has been enabled\", \"success\") //you cannot capitalize here to get desired output\n    //     }\n    // }\n    const togglemode = () => {\n        if (mode === \"light\") {\n            setMode(\"dark\")\n            document.body.style.color = \"white\"\n            document.body.style.backgroundColor = \"#212529\"\n            showAlert(\" Dark mode has been enabled\", \"success\")\n            document.title = \"TextUtils | Dark mode\"\n            setInterval(() => {\n                document.title = \"TextUtils is amazing!!\"\n            }, 2000)\n            setInterval(() => {\n                document.title = \"Install TextUtils now!!\"\n            }, 1500)\n        } else {\n            setMode(\"light\")\n            document.body.style.color = \"black\"\n            document.body.style.backgroundColor = \"white\"\n            showAlert(\" Light mode has been enabled\", \"success\")\n            document.title = \"TextUtils | Light mode\"\n            setInterval(() => {\n                document.title = \"TextUtils is amazing!!\"\n            }, 2000)\n            setInterval(() => {\n                document.title = \"Install TextUtils now!!\"\n            }, 1500)\n        }\n    }\n    return (\n        <>\n            <Router>\n                <Navbar\n                    title=\"TextUtils\"\n                    mode={mode}\n                    togglemode={togglemode}\n                ></Navbar>\n                <Alert alert={alert}></Alert>\n                <div className=\"container my-3\">\n                    <Routes>\n                        <Route exact path=\"/about\" element={<About />} />\n                        <Route\n                            exact //finds the exact matching path\n                            path=\"/\"\n                            element={\n                                <TextForm\n                                    showAlert={showAlert}\n                                    heading=\"Enter the text to manipulate\"\n                                    mode={mode}\n                                ></TextForm>\n                            }\n                        ></Route>\n                    </Routes>\n                </div>\n            </Router>\n        </>\n    )\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}