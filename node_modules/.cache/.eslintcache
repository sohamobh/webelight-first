[{"/home/webelight-047/Desktop/Soha/React-Training/React/textutil/src/index.js":"1","/home/webelight-047/Desktop/Soha/React-Training/React/textutil/src/App.js":"2","/home/webelight-047/Desktop/Soha/React-Training/React/textutil/src/reportWebVitals.js":"3","/home/webelight-047/Desktop/Soha/React-Training/React/textutil/src/components/Navbar.js":"4","/home/webelight-047/Desktop/Soha/React-Training/React/textutil/src/components/TextForm.js":"5","/home/webelight-047/Desktop/Soha/React-Training/React/textutil/src/components/About.js":"6","/home/webelight-047/Desktop/Soha/React-Training/React/textutil/src/components/Alert.js":"7"},{"size":500,"mtime":1646733572766,"results":"8","hashOfConfig":"9"},{"size":3414,"mtime":1646910811099,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":1646733572766,"results":"11","hashOfConfig":"9"},{"size":3486,"mtime":1646910642828,"results":"12","hashOfConfig":"9"},{"size":4302,"mtime":1646904717420,"results":"13","hashOfConfig":"9"},{"size":5905,"mtime":1646904717416,"results":"14","hashOfConfig":"9"},{"size":963,"mtime":1646904717416,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},"qb1t2p",{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"19"},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"19"},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},"/home/webelight-047/Desktop/Soha/React-Training/React/textutil/src/index.js",[],[],["40","41"],"/home/webelight-047/Desktop/Soha/React-Training/React/textutil/src/App.js",["42","43"],[],"/home/webelight-047/Desktop/Soha/React-Training/React/textutil/src/reportWebVitals.js",[],[],"/home/webelight-047/Desktop/Soha/React-Training/React/textutil/src/components/Navbar.js",[],[],"/home/webelight-047/Desktop/Soha/React-Training/React/textutil/src/components/TextForm.js",["44"],[],"import React, { useState } from \"react\"\n\n// console.log(useState('Enter text here2'));\n\nexport default function TextForm(props) {\n    const handleUpClick = () => {\n        // console.log(\"Uppercase was clicked\" + text)\n        let newText = text.toUpperCase()\n        setText(newText)\n        props.showAlert(\"Text is converted to Uppercase!\", \"success\")\n    }\n    const handleLowClick = () => {\n        // console.log(\"Lowercase was clicked\" + text)\n        let newText = text.toLowerCase()\n        setText(newText)\n        props.showAlert(\"Text is converted to Lowercase!\", \"success\")\n    }\n    const handleCopy = () => {\n        var text = document.getElementById(\"MyBox\")\n        text.select()\n        navigator.clipboard.writeText(text.value)\n        props.showAlert(\"Text copied to clipboard!\", \"success\")\n    }\n    const handleExtraSpaces = () => {\n        let newText = text.split(/[ ]+/)\n        setText(newText.join(\" \"))\n        props.showAlert(\"Extra spaces removed!\", \"success\")\n    }\n    const handleClearText = () => {\n        // console.log(\"Clear was clicked\" + text)\n        let newText = \"\"\n        setText(newText)\n        props.showAlert(\n            \"Text box is cleared. Enter new text to manipulate!\",\n            \"success\"\n        )\n    }\n    const handleOnChange = (event) => {\n        // console.log(\"On change\")\n        setText(event.target.value)\n    }\n    var num = 0\n\n    const [text, setText] = useState(\"\") //setText is the update function\n    // text=\"new text\"; //wrong way\n    // setText(\"New text\"); //correct way\n    return (\n        <>\n            <div className=\"container\">\n                <h1>{props.heading}</h1>\n                <div className=\"mb-3\">\n                    {/* <label for=\"MyBox\" className=\"form-label\">Example textarea</label> */}\n                    <textarea\n                        className=\"form-control\"\n                        value={text}\n                        onChange={handleOnChange}\n                        style={{\n                            backgroundColor:\n                                props.mode === \"light\" ? \"dark\" : \"light\",\n                        }}\n                        id=\"MyBox\"\n                        rows=\"8\"\n                    ></textarea>\n                </div>\n                <button\n                    className=\"btn btn-primary mx-1\"\n                    onClick={handleUpClick}\n                >\n                    Convert to Uppercase\n                </button>\n                <button\n                    className=\"btn btn-primary mx-1\" //mx-1 creates space between 2 components; here, buttons\n                    onClick={handleLowClick}\n                >\n                    Convert to Lowercase\n                </button>\n                <button\n                    className=\"btn btn-primary mx-1\" //mx-1 creates space between 2 components; here, buttons\n                    onClick={handleCopy}\n                >\n                    Copy Text\n                </button>\n                <button\n                    className=\"btn btn-primary mx-1\" //mx-1 creates space between 2 components; here, buttons\n                    onClick={handleExtraSpaces}\n                >\n                    Handle Extra Spaces\n                </button>\n                <button\n                    className=\"btn btn-primary mx-1\" //mx-1 creates space between 2 components; here, buttons\n                    onClick={handleClearText}\n                >\n                    Clear text\n                </button>\n            </div>\n            <div className=\"container my-3\">\n                <h2>Your text summary</h2>\n                <p>\n                    {text.split(\" \").length} words and {text.length} characters\n                    {/*number count*/}\n                </p>\n                <p>\n                    {0.008 * text.split(\" \").length} minutes reading time.\n                    {/*1 word = 0.008 minutes(1/125) multiplied by length*/}\n                </p>\n                <p> Total numbers of sentences are {text.split(\".\").length}</p>\n\n                <h3>Preview</h3>\n                <p>\n                    {text.length > 0\n                        ? text\n                        : \"Enter your text in the text box to preview it here\"}\n                </p>\n            </div>\n        </>\n    )\n}\n","/home/webelight-047/Desktop/Soha/React-Training/React/textutil/src/components/About.js",["45"],[],"import React, { useState } from \"react\"\n\nexport default function About() {\n    const [myStyle, setMyStyle] = useState({\n        color: \"black\",\n        backgroundColor: \"white\",\n    })\n    const [buttonText, setBtnText] = useState(\"Enable dark mode\")\n\n    const toggleStyle = () => {\n        if (myStyle.color == \"black\") {\n            setMyStyle({\n                color: \"white\",\n                backgroundColor: \"black\",\n                border: \"1px solid white\",\n            })\n            setBtnText(\"Enable light mode\")\n        } else {\n            setMyStyle({\n                color: \"black\",\n                backgroundColor: \"white\",\n                border: \"1px solid black\",\n            })\n            setBtnText(\"Enable dark mode\")\n        }\n    }\n\n    return (\n        <div className=\"container my-3\" style={myStyle}>\n            <h1 className=\"container my-3\">ABOUT US</h1>\n            <div\n                className=\"accordion accordion-flush my-3\"\n                id=\"accordionFlushExample\"\n            >\n                <div className=\"accordion-item\">\n                    <h2 className=\"accordion-header\" id=\"flush-headingOne\">\n                        <button\n                            className=\"accordion-button collapsed\"\n                            style={myStyle}\n                            type=\"button\"\n                            data-bs-toggle=\"collapse\"\n                            data-bs-target=\"#flush-collapseOne\"\n                            aria-expanded=\"false\"\n                            aria-controls=\"flush-collapseOne\"\n                        >\n                            Accordion Item #1\n                        </button>\n                    </h2>\n                    <div\n                        id=\"flush-collapseOne\"\n                        className=\"accordion-collapse collapse\"\n                        aria-labelledby=\"flush-headingOne\"\n                        data-bs-parent=\"#accordionFlushExample\"\n                    >\n                        <div className=\"accordion-body\" style={myStyle}>\n                            Placeholder content for this accordion, which is\n                            intended to demonstrate the{\" \"}\n                            <code>.accordion-flush</code> class. This is the\n                            first item's accordion body.\n                        </div>\n                    </div>\n                </div>\n                <div className=\"accordion-item\">\n                    <h2 className=\"accordion-header\" id=\"flush-headingTwo\">\n                        <button\n                            className=\"accordion-button collapsed\"\n                            style={myStyle}\n                            type=\"button\"\n                            data-bs-toggle=\"collapse\"\n                            data-bs-target=\"#flush-collapseTwo\"\n                            aria-expanded=\"false\"\n                            aria-controls=\"flush-collapseTwo\"\n                        >\n                            Accordion Item #2\n                        </button>\n                    </h2>\n                    <div\n                        id=\"flush-collapseTwo\"\n                        className=\"accordion-collapse collapse\"\n                        aria-labelledby=\"flush-headingTwo\"\n                        data-bs-parent=\"#accordionFlushExample\"\n                    >\n                        <div className=\"accordion-body\" style={myStyle}>\n                            Placeholder content for this accordion, which is\n                            intended to demonstrate the{\" \"}\n                            <code>.accordion-flush</code> class. This is the\n                            second item's accordion body. Let's imagine this\n                            being filled with some actual content.\n                        </div>\n                    </div>\n                </div>\n                <div className=\"accordion-item\">\n                    <h2 className=\"accordion-header\" id=\"flush-headingThree\">\n                        <button\n                            className=\"accordion-button collapsed\"\n                            style={myStyle}\n                            type=\"button\"\n                            data-bs-toggle=\"collapse\"\n                            data-bs-target=\"#flush-collapseThree\"\n                            aria-expanded=\"false\"\n                            aria-controls=\"flush-collapseThree\"\n                        >\n                            Accordion Item #3\n                        </button>\n                    </h2>\n                    <div\n                        id=\"flush-collapseThree\"\n                        className=\"accordion-collapse collapse\"\n                        aria-labelledby=\"flush-headingThree\"\n                        data-bs-parent=\"#accordionFlushExample\"\n                    >\n                        <div className=\"accordion-body\" style={myStyle}>\n                            Placeholder content for this accordion, which is\n                            intended to demonstrate the{\" \"}\n                            <code>.accordion-flush</code> class. This is the\n                            third item's accordion body. Nothing more exciting\n                            happening here in terms of content, but just filling\n                            up the space to make it look, at least at first\n                            glance, a bit more representative of how this would\n                            look in a real-world application.\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div className=\"container my-3\">\n                <button\n                    onClick={toggleStyle}\n                    type=\"button\"\n                    className=\"btn btn-primary\"\n                >\n                    {buttonText}\n                </button>\n            </div>\n        </div>\n    )\n}\n","/home/webelight-047/Desktop/Soha/React-Training/React/textutil/src/components/Alert.js",[],[],{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","severity":1,"message":"51","line":1,"column":50,"nodeType":"52","messageId":"53","endLine":1,"endColumn":54},{"ruleId":"50","severity":1,"message":"54","line":2,"column":8,"nodeType":"52","messageId":"53","endLine":2,"endColumn":12},{"ruleId":"50","severity":1,"message":"55","line":42,"column":9,"nodeType":"52","messageId":"53","endLine":42,"endColumn":12},{"ruleId":"56","severity":1,"message":"57","line":11,"column":27,"nodeType":"58","messageId":"59","endLine":11,"endColumn":29},"no-native-reassign",["60"],"no-negated-in-lhs",["61"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'logo' is defined but never used.","'num' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]